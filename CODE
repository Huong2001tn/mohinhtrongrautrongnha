
#include "DHT.h"
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include<EEPROM.h>
#include <RTClib.h>
#define DHTPIN 2     // Chân DATA nối với PD0
#define LDR_PIN A0    // Chân PE3 nối với chân OUT cảm biến as
#define SOIL_MOIST_1_PIN A1 // Chân PE4 nối với cảm biến độ ẩm
// Relay, nút nhấn
#define PUMPW_ON A2   //Nút có sẵn trên kit
#define PUMPW_PIN 3
#define PUMPS_ON A3   //Nút có sẵn trên kit
#define PUMPS_PIN 12
#define PUMPS_PIN 4
#define DHTTYPE DHT11   // DHT 11
#define buzzer 10

DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 20, 4);
RTC_DS1307 RTC;
byte degree[8] =
{
  0B01110,
  0B01010,
  0B01110,
  0B00000,
  0B00000,
  0B00000,
  0B00000,
  0B00000
};
int humDHT;
int tempDHT;

int lumen;
int DARK_LIGHT = 40;

int soilMoist;
int DRY_SOIL = 40;
int WET_SOIL = 60;

boolean pumpWaterStatus = 0;
boolean pumpPesStatus = 0;
int timePumpOn = 10; // Thời gian bật bơm nước

long sampleTimingSeconds = 50; // ==> Thời gian đọc cảm biến (s)
long startTiming = 0;
long elapsedTime = 0;

int temp,inc,hours1,minut,add=11;
int next=7;    
int INC=8;
int set_mo=5;
int set_tat=6;
int HOUR,MINUT,SECOND;

void setup() {
  // put your setup code here, to run once:
// Khởi tạo cổng serial baud 115200
  Serial.begin(115200);
  lcd.init();
  lcd.backlight();
  Serial.println("DE TAI NCKH ICTU!");
//  lcd.begin(20, 4);
//  lcd.setCursor(0, 0);
//  lcd.print("Trong rau");
//  lcd.setCursor(0, 1);
//  lcd.print("Trong nha");
//  delay(500);
//  lcd.print("");
//  lcd.setCursor(0, 0);
//  lcd.print("Xin chao ");
  
  pinMode(PUMPW_PIN, OUTPUT);
  pinMode(PUMPS_PIN, OUTPUT);
  pinMode(PUMPW_ON, INPUT_PULLUP); // Button
  pinMode(PUMPS_ON, INPUT_PULLUP); // Button
  
  
  // Bắt đầu đọc dữ liệu
 
  startTiming = millis(); // Bắt đầu đếm thời gian
//  lcd.clear();
//  lcd.setCursor(0, 0);
//  lcd.print("Vui long cho ...");
//Setup cho Timer
Wire.begin();

 lcd.createChar(1, degree);
 pinMode(INC, INPUT);
 pinMode(next, INPUT);
 pinMode(set_mo, INPUT);
 pinMode(set_tat, INPUT);
 pinMode(buzzer, OUTPUT);
 digitalWrite(next, HIGH);
 digitalWrite(set_mo, HIGH);
 digitalWrite(INC, HIGH);
 digitalWrite(set_tat, HIGH);
  digitalWrite(buzzer, 0);
//  lcd.setCursor(-4,2);
//  lcd.print(" ");
//  lcd.setCursor(16,4);
//  lcd.print(" ");
//   lcd.setCursor(-4,2);
//   lcd.print("Real Time Clock");
//   lcd.setCursor(16,4);
//   lcd.print("Circuit Digest ");
//    delay(1000);
    
 if(!RTC.isrunning())
 {
//RTC.adjust(DateTime(__DATE__,__TIME__));
 }
}
  


void loop() {
  // put your main code here, to run repeatedly:
  aplyCmd();
  
  // Khởi tạo timer
  elapsedTime = millis() - startTiming;
  readLocalCmd();
  
  if (elapsedTime > (sampleTimingSeconds * 1000))
  {
    readSensors();
    printData();
    showDataLCD();
    autoControlPlantation();
    startTiming = millis();
  }
   int temp=0,val=1,temp4;
   DateTime now = RTC.now();
   if(digitalRead(set_mo) == 0)      //set Alarm time
   { 
     lcd.setCursor(-4,2);
     lcd.print("  Set ON  ");
    delay(2000);
    defualt();
    time();
    delay(1000);
    lcd.clear();
    lcd.setCursor(-4,2);
    lcd.print("  Alarm time ");
    lcd.setCursor(16,4);
    lcd.print(" has been set  ");
    delay(2000);




  
}

 if(digitalRead(set_tat) == 0)      //set Alarm time
   { 
     lcd.setCursor(-4,2);
     lcd.print("  Set OFF  ");
    delay(2000);
    defualt();
    time();
    delay(1000);
    lcd.clear();
    lcd.setCursor(-4,2);
    lcd.print("  Alarm time ");
    lcd.setCursor(16,4);
    lcd.print(" has been set  ");
    delay(2000);
  
 }
 lcd.clear();
 lcd.setCursor(-4,2);
 lcd.print("Time:");
 lcd.setCursor(2,2);
 lcd.print(HOUR=now.hour(),DEC); 
 lcd.print(":");
 lcd.print(MINUT=now.minute(),DEC);
 lcd.print(":");
 lcd.print(SECOND=now.second(),DEC);
 lcd.setCursor(16,4);
 lcd.print("Date: ");
 lcd.print(now.day(),DEC);
 lcd.print("/");
 lcd.print(now.month(),DEC);
 lcd.print("/");
 lcd.print(now.year(),DEC);
 match();
 match1();
 delay(500);
}
void defualt()
{
  lcd.setCursor(16,4);
  lcd.print(HOUR);
  lcd.print(":");
  lcd.print(MINUT);
  lcd.print(":");
  lcd.print(SECOND);
  
}
void time()                             
{
  int temp=1,minuts=0,hours=0,seconds=0;
    while(temp==1)
    {
     if(digitalRead(INC)==0)
     {
      HOUR++;
      if(HOUR==24)
      {
       HOUR=0;
      }
      while(digitalRead(INC)==0);
     }
     lcd.clear();
      lcd.setCursor(-4,2);
    lcd.print("Set Alarm Time ");
   //lcd.print(x); 
    lcd.setCursor(16,4);
    lcd.print(HOUR);
    lcd.print(":");
    lcd.print(MINUT);
    lcd.print(":");
    lcd.print(SECOND);
    delay(100);
    if(digitalRead(next)==0)
    {
      hours1=HOUR;
      EEPROM.write(add++,hours1);
     temp=2;
     while(digitalRead(next)==0);
    }
    }
    
    while(temp==2)
    {
     if(digitalRead(INC)==0)
     {
      MINUT++;
      if(MINUT==60)
      {MINUT=0;}
      while(digitalRead(INC)==0);
     }
     // lcd.clear();
    lcd.setCursor(16,4);
    lcd.print(HOUR);
    lcd.print(":");
    lcd.print(MINUT);
    lcd.print(":");
    lcd.print(SECOND);
    delay(100);
      if(digitalRead(next)==0)
      {
       minut=MINUT;
       EEPROM.write(add++, minut);
       temp=0;
       while(digitalRead(next)==0);
      }
    }
    delay(1000);
}
void match()
{
  int tem[23];
  for(int i=11;i<23;i++)
  {
    tem[i]=EEPROM.read(i);
  }
  if(HOUR == tem[11] && MINUT == tem[12]) 
  {
    digitalWrite(buzzer, HIGH);
  }
}
void match1()
{
  int tem1[23];
  for(int j=11;j<23;j++)
  {
    tem1[j]=EEPROM.read(j);
  }
  if(HOUR == tem1[13] && MINUT == tem1[14]) 
  {
  digitalWrite(buzzer, LOW);
  }
}






int getLumen(int anaPin)
{
  int anaValue = 0;
  for (int i = 0; i < 10; i++) // Đọc giá trị cảm biến 10 lần và lấy giá trị trung bình
  {
    anaValue += analogRead(anaPin);
    delay(50);
  }

  anaValue = anaValue / 10;
  anaValue = map(anaValue, 1023, 0, 0, 100); //Tối:0  ==> Sáng 100%

  return anaValue;
}
int getSoilMoist()
{
  int i = 0;
  int anaValue = 0;
  for (i = 0; i < 10; i++)  //
  {
    anaValue += analogRead(SOIL_MOIST_1_PIN); //Đọc giá trị cảm biến độ ẩm đất
    delay(50);   // Đợi đọc giá trị ADC
  }
  anaValue = anaValue / (i);
  anaValue = map(anaValue, 1023, 0, 0, 100); //Ít nước:0%  ==> Nhiều nước 100%
  return anaValue;
}
void readSensors(void)
{
  tempDHT = dht.readTemperature();   //Đọc nhiệt độ DHT11
  humDHT = dht.readHumidity();       //Đọc độ ẩm DHT11
  lumen = getLumen(LDR_PIN);         //Đọc ánh sáng
  soilMoist = getSoilMoist();        //Đọc cảm biến độ ẩm đất
}
void showDataLCD(void)
{
  lcd.setCursor(0, 1);
  lcd.print(" DO.AM% = ");
  lcd.print(humDHT);
  lcd.println("  % " );

  lcd.setCursor(1, 0);
  lcd.print(" NH.DO = ");
  lcd.print(tempDHT);
  lcd.println(" *C ");
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print(" AM.DAT% = ");
  lcd.print(soilMoist);
  lcd.println("  %   " );

  lcd.setCursor(1, 0);
  lcd.print("A.SANG% = ");
  lcd.print(lumen);
  lcd.println(" %  ");
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("  BOM.NC = ");
  lcd.print(pumpWaterStatus);
  lcd.println("      " );

  lcd.setCursor(1, 0);
  lcd.print("BOM.SAU = ");
  lcd.print(pumpPesStatus);
  lcd.println("    ");
  delay(1000);
}
void printData(void)
{
  // IN thông tin ra màn hình
  Serial.print("Do am: ");
  Serial.print(humDHT);
  Serial.print(" %\t");
  Serial.print("Nhiet do: ");
  Serial.print(tempDHT);
  Serial.print(" *C\t");
  Serial.print("Anh sang: ");
  Serial.print(lumen);
  Serial.print(" %\t");
  Serial.print("Do am dat: ");
  Serial.print(soilMoist);
  Serial.println(" %");
}
/***************************************************
  Hàm bật bơm nước
****************************************************/
void turnPumpOn()
{
  digitalWrite(PUMPW_PIN, LOW);
  pumpWaterStatus = 1;
  showDataLCD();
  delay (timePumpOn * 1000);
  digitalWrite(PUMPW_PIN, HIGH);
  pumpWaterStatus = 0;
  showDataLCD();
}
/****************************************************************
  Hàm đọc trạng thái bơm và kiểm tra nút nhấn
  (Nút nhấn mặc định là mức "CAO"):
****************************************************************/
void readLocalCmd()
{
  int digiValue = debounce(PUMPW_ON);
  if (!digiValue)
  {
    pumpWaterStatus = !pumpWaterStatus;
    showDataLCD();
    aplyCmd();
  }
  digiValue = debounce(PUMPS_ON);
  if (!digiValue)
  {
    pumpPesStatus = !pumpPesStatus;
    showDataLCD();
    aplyCmd();
  }
}
/***************************************************
  Thực hiện điều khiển các bơm
************************************************************************************/
void aplyCmd()
{
  if (pumpWaterStatus == 1) digitalWrite(PUMPW_PIN, LOW);
  if (pumpWaterStatus == 0) digitalWrite(PUMPW_PIN, HIGH);

  if (pumpPesStatus == 1) digitalWrite(PUMPS_PIN, LOW);
  if (pumpPesStatus == 0) digitalWrite(PUMPS_PIN, HIGH);
}
/***************************************************
  Hàm kiểm tra trạng thái phím bấm
****************************************************/
/***************************************************
  Hàm kiểm tra trạng thái phím bấm
****************************************************/
boolean debounce(int pin)
{
  boolean state;
  boolean previousState;
  const int debounceDelay = 60;

  previousState = digitalRead(pin);
  for (int counter = 0; counter < debounceDelay; counter++)
  {
    delay(1);
    state = digitalRead(pin);
    if (state != previousState)
    {
      counter = 0;
      previousState = state;
    }
  }
  return state;
}
/***************************************************
   Chức năng tự động tưới tiêu
****************************************************/
void autoControlPlantation()
{
  //--------------------------------- BƠM NƯỚC ------//
  if (soilMoist < DRY_SOIL && lumen > DARK_LIGHT)
  {
    turnPumpOn();
  }
}
